// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hero.mywage.controller;

import com.hero.mywage.controller.UserInfoController;
import com.hero.mywage.entity.ContentType;
import com.hero.mywage.entity.UserInfo;
import com.hero.mywage.service.UserInfoService;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UserInfoController_Roo_Controller {
    
    @Autowired
    UserInfoService UserInfoController.userInfoService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UserInfoController.create(@Valid UserInfo userInfo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userInfo);
            return "userinfoes/create";
        }
        uiModel.asMap().clear();
        userInfoService.saveUserInfo(userInfo);
        return "redirect:/userinfoes/" + encodeUrlPathSegment(userInfo.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UserInfoController.createForm(Model uiModel) {
        populateEditForm(uiModel, new UserInfo());
        return "userinfoes/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String UserInfoController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("userinfo", userInfoService.findUserInfo(id));
        uiModel.addAttribute("itemId", id);
        return "userinfoes/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UserInfoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("userinfoes", userInfoService.findUserInfoEntries(firstResult, sizeNo));
            float nrOfPages = (float) userInfoService.countAllUserInfoes() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("userinfoes", userInfoService.findAllUserInfoes());
        }
        return "userinfoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UserInfoController.update(@Valid UserInfo userInfo, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userInfo);
            return "userinfoes/update";
        }
        uiModel.asMap().clear();
        userInfoService.updateUserInfo(userInfo);
        return "redirect:/userinfoes/" + encodeUrlPathSegment(userInfo.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String UserInfoController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, userInfoService.findUserInfo(id));
        return "userinfoes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String UserInfoController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        UserInfo userInfo = userInfoService.findUserInfo(id);
        userInfoService.deleteUserInfo(userInfo);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/userinfoes";
    }
    
    void UserInfoController.populateEditForm(Model uiModel, UserInfo userInfo) {
        uiModel.addAttribute("userInfo", userInfo);
        uiModel.addAttribute("contenttypes", Arrays.asList(ContentType.values()));
    }
    
    String UserInfoController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
