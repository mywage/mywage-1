// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hero.mywage.entity;

import com.hero.mywage.entity.AboutMe;
import com.hero.mywage.entity.AboutMeDataOnDemand;
import com.hero.mywage.entity.UserInfoDataOnDemand;
import com.hero.mywage.service.AboutMeService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AboutMeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AboutMeDataOnDemand: @Component;
    
    private Random AboutMeDataOnDemand.rnd = new SecureRandom();
    
    private List<AboutMe> AboutMeDataOnDemand.data;
    
    @Autowired
    UserInfoDataOnDemand AboutMeDataOnDemand.userInfoDataOnDemand;
    
    @Autowired
    AboutMeService AboutMeDataOnDemand.aboutMeService;
    
    public AboutMe AboutMeDataOnDemand.getNewTransientAboutMe(int index) {
        AboutMe obj = new AboutMe();
        setMyPhoto(obj, index);
        setSelfIntroduction(obj, index);
        return obj;
    }
    
    public void AboutMeDataOnDemand.setMyPhoto(AboutMe obj, int index) {
        byte[] myPhoto = String.valueOf(index).getBytes();
        obj.setMyPhoto(myPhoto);
    }
    
    public void AboutMeDataOnDemand.setSelfIntroduction(AboutMe obj, int index) {
        String selfIntroduction = "selfIntroduction_" + index;
        if (selfIntroduction.length() > 200) {
            selfIntroduction = selfIntroduction.substring(0, 200);
        }
        obj.setSelfIntroduction(selfIntroduction);
    }
    
    public AboutMe AboutMeDataOnDemand.getSpecificAboutMe(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AboutMe obj = data.get(index);
        BigInteger id = obj.getId();
        return aboutMeService.findAboutMe(id);
    }
    
    public AboutMe AboutMeDataOnDemand.getRandomAboutMe() {
        init();
        AboutMe obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return aboutMeService.findAboutMe(id);
    }
    
    public boolean AboutMeDataOnDemand.modifyAboutMe(AboutMe obj) {
        return false;
    }
    
    public void AboutMeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = aboutMeService.findAboutMeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AboutMe' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AboutMe>();
        for (int i = 0; i < 10; i++) {
            AboutMe obj = getNewTransientAboutMe(i);
            try {
                aboutMeService.saveAboutMe(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
