// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hero.mywage.entity;

import com.hero.mywage.entity.UserInfo;
import com.hero.mywage.entity.UserInfoDataOnDemand;
import com.hero.mywage.service.UserInfoService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserInfoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserInfoDataOnDemand: @Component;
    
    private Random UserInfoDataOnDemand.rnd = new SecureRandom();
    
    private List<UserInfo> UserInfoDataOnDemand.data;
    
    @Autowired
    UserInfoService UserInfoDataOnDemand.userInfoService;
    
    public UserInfo UserInfoDataOnDemand.getNewTransientUserInfo(int index) {
        UserInfo obj = new UserInfo();
        setNickname(obj, index);
        setPassworld(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void UserInfoDataOnDemand.setNickname(UserInfo obj, int index) {
        String nickname = "nickname_" + index;
        if (nickname.length() > 50) {
            nickname = nickname.substring(0, 50);
        }
        obj.setNickname(nickname);
    }
    
    public void UserInfoDataOnDemand.setPassworld(UserInfo obj, int index) {
        String passworld = "passworld_" + index;
        if (passworld.length() > 50) {
            passworld = passworld.substring(0, 50);
        }
        obj.setPassworld(passworld);
    }
    
    public void UserInfoDataOnDemand.setUserName(UserInfo obj, int index) {
        String userName = "userName_" + index;
        if (userName.length() > 100) {
            userName = new Random().nextInt(10) + userName.substring(1, 100);
        }
        obj.setUserName(userName);
    }
    
    public UserInfo UserInfoDataOnDemand.getSpecificUserInfo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserInfo obj = data.get(index);
        BigInteger id = obj.getId();
        return userInfoService.findUserInfo(id);
    }
    
    public UserInfo UserInfoDataOnDemand.getRandomUserInfo() {
        init();
        UserInfo obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return userInfoService.findUserInfo(id);
    }
    
    public boolean UserInfoDataOnDemand.modifyUserInfo(UserInfo obj) {
        return false;
    }
    
    public void UserInfoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userInfoService.findUserInfoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserInfo' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserInfo>();
        for (int i = 0; i < 10; i++) {
            UserInfo obj = getNewTransientUserInfo(i);
            try {
                userInfoService.saveUserInfo(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
