// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hero.mywage.entity;

import com.hero.mywage.entity.MyWebPage;
import com.hero.mywage.entity.MyWebPageDataOnDemand;
import com.hero.mywage.service.MyWebPageService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MyWebPageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MyWebPageDataOnDemand: @Component;
    
    private Random MyWebPageDataOnDemand.rnd = new SecureRandom();
    
    private List<MyWebPage> MyWebPageDataOnDemand.data;
    
    @Autowired
    MyWebPageService MyWebPageDataOnDemand.myWebPageService;
    
    public MyWebPage MyWebPageDataOnDemand.getNewTransientMyWebPage(int index) {
        MyWebPage obj = new MyWebPage();
        setCollectionName(obj, index);
        setIsPublic(obj, index);
        setParent(obj, index);
        setStatus(obj, index);
        setWebPageUrl(obj, index);
        setWebUrl(obj, index);
        return obj;
    }
    
    public void MyWebPageDataOnDemand.setCollectionName(MyWebPage obj, int index) {
        String collectionName = "collectionName_" + index;
        if (collectionName.length() > 100) {
            collectionName = collectionName.substring(0, 100);
        }
        obj.setCollectionName(collectionName);
    }
    
    public void MyWebPageDataOnDemand.setIsPublic(MyWebPage obj, int index) {
        Boolean isPublic = Boolean.TRUE;
        obj.setIsPublic(isPublic);
    }
    
    public void MyWebPageDataOnDemand.setParent(MyWebPage obj, int index) {
        MyWebPage parent = obj;
        obj.setParent(parent);
    }
    
    public void MyWebPageDataOnDemand.setStatus(MyWebPage obj, int index) {
        Integer status = new Integer(index);
        if (status > 100) {
            status = 100;
        }
        obj.setStatus(status);
    }
    
    public void MyWebPageDataOnDemand.setWebPageUrl(MyWebPage obj, int index) {
        String webPageUrl = "webPageUrl_" + index;
        if (webPageUrl.length() > 500) {
            webPageUrl = webPageUrl.substring(0, 500);
        }
        obj.setWebPageUrl(webPageUrl);
    }
    
    public void MyWebPageDataOnDemand.setWebUrl(MyWebPage obj, int index) {
        String webUrl = "webUrl_" + index;
        obj.setWebUrl(webUrl);
    }
    
    public MyWebPage MyWebPageDataOnDemand.getSpecificMyWebPage(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MyWebPage obj = data.get(index);
        BigInteger id = obj.getId();
        return myWebPageService.findMyWebPage(id);
    }
    
    public MyWebPage MyWebPageDataOnDemand.getRandomMyWebPage() {
        init();
        MyWebPage obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return myWebPageService.findMyWebPage(id);
    }
    
    public boolean MyWebPageDataOnDemand.modifyMyWebPage(MyWebPage obj) {
        return false;
    }
    
    public void MyWebPageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = myWebPageService.findMyWebPageEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MyWebPage' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MyWebPage>();
        for (int i = 0; i < 10; i++) {
            MyWebPage obj = getNewTransientMyWebPage(i);
            try {
                myWebPageService.saveMyWebPage(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
