// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.hero.mywage.entity;

import com.hero.mywage.entity.MyWebPageFileDataOnDemand;
import com.hero.mywage.entity.MyWebPageFileIntegrationTest;
import com.hero.mywage.service.MyWebPageFileService;
import java.math.BigInteger;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect MyWebPageFileIntegrationTest_Roo_IntegrationTest {
    
    declare @type: MyWebPageFileIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: MyWebPageFileIntegrationTest: @ContextConfiguration(locations = "classpath*:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    MyWebPageFileDataOnDemand MyWebPageFileIntegrationTest.dod;
    
    @Autowired
    MyWebPageFileService MyWebPageFileIntegrationTest.myWebPageFileService;
    
    @Test
    public void MyWebPageFileIntegrationTest.testCountAllMyWebPageFiles() {
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to initialize correctly", dod.getRandomMyWebPageFile());
        long count = myWebPageFileService.countAllMyWebPageFiles();
        Assert.assertTrue("Counter for 'MyWebPageFile' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void MyWebPageFileIntegrationTest.testFindMyWebPageFile() {
        MyWebPageFile obj = dod.getRandomMyWebPageFile();
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to provide an identifier", id);
        obj = myWebPageFileService.findMyWebPageFile(id);
        Assert.assertNotNull("Find method for 'MyWebPageFile' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'MyWebPageFile' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void MyWebPageFileIntegrationTest.testFindAllMyWebPageFiles() {
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to initialize correctly", dod.getRandomMyWebPageFile());
        long count = myWebPageFileService.countAllMyWebPageFiles();
        Assert.assertTrue("Too expensive to perform a find all test for 'MyWebPageFile', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<MyWebPageFile> result = myWebPageFileService.findAllMyWebPageFiles();
        Assert.assertNotNull("Find all method for 'MyWebPageFile' illegally returned null", result);
        Assert.assertTrue("Find all method for 'MyWebPageFile' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void MyWebPageFileIntegrationTest.testFindMyWebPageFileEntries() {
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to initialize correctly", dod.getRandomMyWebPageFile());
        long count = myWebPageFileService.countAllMyWebPageFiles();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<MyWebPageFile> result = myWebPageFileService.findMyWebPageFileEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'MyWebPageFile' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'MyWebPageFile' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void MyWebPageFileIntegrationTest.testSaveMyWebPageFile() {
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to initialize correctly", dod.getRandomMyWebPageFile());
        MyWebPageFile obj = dod.getNewTransientMyWebPageFile(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'MyWebPageFile' identifier to be null", obj.getId());
        try {
            myWebPageFileService.saveMyWebPageFile(obj);
        } catch (final ConstraintViolationException e) {
            final StringBuilder msg = new StringBuilder();
            for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                final ConstraintViolation<?> cv = iter.next();
                msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
            }
            throw new IllegalStateException(msg.toString(), e);
        }
        Assert.assertNotNull("Expected 'MyWebPageFile' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void MyWebPageFileIntegrationTest.testDeleteMyWebPageFile() {
        MyWebPageFile obj = dod.getRandomMyWebPageFile();
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'MyWebPageFile' failed to provide an identifier", id);
        obj = myWebPageFileService.findMyWebPageFile(id);
        myWebPageFileService.deleteMyWebPageFile(obj);
        Assert.assertNull("Failed to remove 'MyWebPageFile' with identifier '" + id + "'", myWebPageFileService.findMyWebPageFile(id));
    }
    
}
